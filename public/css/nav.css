/*  I use this style for reset code to ensure a consistent baseline for my web designs
By setting the margin and padding of all elements to 0, I can avoid unexpected spacing issues.
 The box-sizing property set to border-box ensures that the padding and border of elements are included in their total width and height, making layout calculations more predictable.
 Finally, I specify the font-family as 'poppins', sans-serif to use the Poppins font for the page content. */
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'poppins', sans-serif   ;
}
.ribbon{
  background-color: #640136;
  font-size: 1rem;
  color: #f5f5f5;
  padding:15px;
  text-align: center;
}
/*  for nav bar i chose sticky position,  and width 100% to show it always top of my page and taking up the full width of the page
As my design it contains a logo, some navigation items, search bar, user ,and  shipping bag as well.  */
.navbar{
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    background: #f5f5f5;
    z-index: 9;
}
/* I chose to use flex for the position of the navigation items because it allows for easy alignment and distribution of elements within a container.
 By using display: flex on the container, I can easily align the navigation items horizontally and center them within the container. */
.nav{
    display: flex;
    padding: 10px 10vw;
    justify-content: space-between;
}
.brand-logo{
    height: 100px;

}
 .nav-items{
    display: flex;
    align-items: center;
 }
  .nav-items a{
    margin-left: 20px;
 }
 .nav-items a img{
    width:30px;
 }
 .link-container{
    width: 100%;
    display: flex;
    padding: 10px 10vw;
    justify-content: center;
    list-style: none;
    border-top: 1px solid #d1d1d1;

 }
 .link{
    padding: 0 10px;
    margin: 0 5px;
    color: #640136;
    /* font-weight: bold; */
    text-decoration: none;
    position: relative; 
 }
/* I have created a CSS pseudo-element, ::after, and used it to create a smooth transition effect for the links in the navigation bar.  */
  .link::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: -2px;
    width: 0;
    height: 2px;
    background-color: #640136;
    transition: width 0.3s ease-in-out;
  }

  .link:hover::after {
    width: 100%;
  }
  /* I have added some CSS rules to hide the hamburger icon and navigation toggle button, which are used for mobile devices, when viewed on a desktop computer. */
  .nav-toggle {
    display: none;
  }

  .hamburger {
    display: none;
  }
  /* ======Media query for small screens==== */
  /* I used this media query for make responsive page, when the screen size is less than 600px the nav items will be hidden and 
  display hamburger menu */

@media only screen and (max-width: 767px) {

    .ribbon{
       font-size:.8rem;
      }
  .nav-items {
        display: none;
      }
      .
      .nav-items.active {
        display: flex !important;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 80px;
        left: 0;
        width: 100%;
        height: calc(100% - 80px);
        background-color: #fff;
        z-index: 999;
      }

      /* Show the hamburger menu */
      .hamburger {
        display: block;
        cursor: pointer;
        position: absolute;
        top: 10px;
        right: 20px;
        z-index: 1000;
      }

      .line {
        width: 30px;
        height: 4px;
        background-color: rgb(251, 244, 244);
        margin: 6px auto;
      }

      .link-container.active {
        opacity: 1;
        pointer-events: all;
      }

      /* Hide the link-container by default */
      .link-container {
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease-in-out;
      }
    }